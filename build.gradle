buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.hibernate:hibernate-gradle-plugin:5.1.0.Final"
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0' apply true
    id 'org.flywaydb.flyway' version '8.0.0-beta2'
    id 'maven-publish'
}

apply plugin: 'org.hibernate.orm'

hibernate {
    enhance {
        enableLazyInitialization= true
        enableDirtyTracking = true
        enableAssociationManagement = true
        enableExtendedEnhancement = false
    }
}



repositories {
    mavenCentral()
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = 'jitpack-repo'
        url = 'https://jitpack.io'
    }
}

static def loadEnv() {
    def env = [:]

    try {
        def file = new File('.env')
        def scanner = new Scanner(file)
        while (scanner.hasNextLine()) {
            def line = scanner.nextLine()
            if (line.contains('=')) {
                def pair = line.split('=')
                env.put(pair[0], pair.length == 2 ? pair[1] : '')
            }
        }
    } catch (FileNotFoundException ignored) { }

    env.putAll(System.getenv())
    return env
}

def env = loadEnv()

shadowJar {
    def remoteGson = 'com.google.code.gson'
    def remoteCommon = 'com.google.common'
    def remoteOpenfeign = 'openfeign'
    def remoteMariaJdbc = 'org.mariadb.jdbc'
    def remoteHibernate = 'org.hibernate'
    def remoteYaml = 'org.yaml.snakeyaml'
    def remoteApacheText = 'org.apache.commons.text'

    def localGson = 'dev.sbs.api.util.google.gson'
    def localCommon = 'dev.sbs.api.util.google.common'
    def localOpenfeign = 'dev.sbs.api.util.openfeign'
    def localMariaJdbc = 'dev.sbs.api.data.sql.mariadb'
    def localHibernate = 'dev.sbs.api.data.sql.hibernate'
    def localYaml = 'dev.sbs.api.data.yaml.snake'
    def localApacheText = 'dev.sbs.api.util.text'

    relocate remoteGson, localGson
    relocate remoteCommon, localCommon
    relocate remoteOpenfeign, localOpenfeign
    relocate remoteMariaJdbc, localMariaJdbc
    relocate remoteHibernate, localHibernate
    relocate remoteYaml, localYaml
    relocate remoteApacheText, localApacheText
}

sourceSets {
    dev {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    devTest {
        java {
            srcDirs = ['src/test/java']
            compileClasspath += sourceSets.dev.output
            runtimeClasspath += sourceSets.dev.output
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.29'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.4'
    implementation group: 'org.hibernate', name: 'hibernate-hikaricp', version: '5.5.7.Final'
    implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '11.6'
    implementation group: 'io.github.openfeign', name: 'feign-gson', version: '11.6'
    implementation group: 'redis.clients', name: 'jedis', version: '3.7.0'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}


configurations {
    devImplementation.extendsFrom implementation
    devCompileOnly.extendsFrom compileOnly
    devAnnotationProcessor.extendsFrom annotationProcessor

    devTestImplementation.extendsFrom implementation
    devTestCompileOnly.extendsFrom compileOnly
    devTestAnnotationProcessor.extendsFrom annotationProcessor
    devTestImplementation.extendsFrom testImplementation
    devTestRuntimeOnly.extendsFrom testRuntimeOnly
}

// Exclude specific packages while they are being refactored
task devJar(type: Jar, group: 'build') {
    archiveAppendix.value('dev')
    archiveBaseName.value(artifactIdProp)
    archiveVersion.value(versionProp)

    from sourceSets.dev.java
    from sourceSets.dev.output
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/skyblock-simplified/sbs-api')
            credentials {
                username = env.get('GITHUB_USER')
                password = env.get('GITHUB_TOKEN')
            }
        }
    }
    publications {
        devPub(MavenPublication) {
            groupId = groupIdProp
            artifactId = artifactIdProp + '-dev'
            version = versionProp
            artifacts = [devJar]
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
                configurations.compileOnly.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
                configurations.annotationProcessor.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }
        releasePub(MavenPublication) {
            groupId = groupIdProp
            artifactId = artifactIdProp
            version = versionProp
            artifacts = [shadowJar]
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
                configurations.compileOnly.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
                configurations.annotationProcessor.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }
    }
}

flyway {
    url = 'jdbc:mariadb://' + env.get('DATABASE_HOST') + ':' + env.get('DATABASE_PORT') + '/' + env.get('DATABASE_SCHEMA')
    user = env.get('DATABASE_USER')
    password = env.get('DATABASE_PASSWORD')
}

test {
    useJUnitPlatform()
}

tasks.register('devTest', Test) {
    useJUnitPlatform()
    group = 'verification'
    testClassesDirs = sourceSets.devTest.output.classesDirs
    classpath = sourceSets.devTest.runtimeClasspath
}
