plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.flywaydb.flyway' version '8.0.0-beta2'
    id 'maven-publish'
}

static def loadEnv() {
    def env = [:]
    try {
        def file = new File('.env')
        def scanner = new Scanner(file)
        while (scanner.hasNextLine()) {
            def line = scanner.nextLine()
            if (line.contains('=')) {
                def pair = line.split('=')
                env.put(pair[0], pair.length == 2 ? pair[1] : '')
            }
        }
    } catch (FileNotFoundException ignored) {
    }
    env.putAll(System.getenv())
    return env
}

def env = loadEnv()

repositories {
    mavenCentral()
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = 'jitpack-repo'
        url = 'https://jitpack.io'
    }
}

dependencies {
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.7'
    implementation group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.6'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.4'
    implementation group: 'org.hibernate', name: 'hibernate-hikaricp', version: '5.5.7.Final'
    implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '11.6'
    implementation group: 'io.github.openfeign', name: 'feign-gson', version: '11.6'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
}

shadowJar {
    def googleGson = 'com.google.code.gson'
    def googleGuava = 'com.google.guava'
    def localGoogleGson = 'gg.sbs.api.google.gson'
    def localGoogleGuava = 'gg.sbs.api.google.guava'
    relocate googleGson, localGoogleGson
    relocate googleGuava, localGoogleGuava
}

sourceSets {
    dev {
        java {
            srcDirs = ['src/main/java']
            exclude '**/data/sql/integrated/**'
            exclude '**/http_old/**'
            exclude '**/hypixel_old/**'
            exclude '**/mojang_old/**'
            exclude '**/nbt_old/**'
        }
        resources {
            srcDirs = ['src/main/resources']
            exclude '**/data/sql/integrated/**'
            exclude '**/http_old/**'
            exclude '**/hypixel_old/**'
            exclude '**/mojang_old/**'
            exclude '**/nbt_old/**'
        }
    }
}

configurations {
    devImplementation.extendsFrom implementation
    devCompileOnly.extendsFrom compileOnly
    devAnnotationProcessor.extendsFrom annotationProcessor
}

// Exclude specific packages while they are being refactored
task devJar(type: Jar, group: 'build') {
    archiveAppendix.value('dev')
    archiveBaseName.value(artifactIdProp)
    archiveVersion.value(versionProp)

    from sourceSets.dev.java
    from sourceSets.dev.output
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/skyblock-simplified/sbs-api')
            credentials {
                username = env.get('GITHUB_USER')
                password = env.get('GITHUB_PAT')
            }
        }
    }
    publications {
        devPub(MavenPublication) {
            groupId = groupIdProp
            artifactId = artifactIdProp + '-dev'
            version = versionProp
            artifacts = [devJar]
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
                configurations.compileOnly.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
                configurations.annotationProcessor.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }
        releasePub(MavenPublication) {
            groupId = groupIdProp
            artifactId = artifactIdProp
            version = versionProp
            artifacts = [jar]
            pom.withXml {
                def dependencies = asNode(null).appendNode('dependencies')
                configurations.implementation.getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
                configurations.compileOnly.getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
                configurations.annotationOnly.getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

flyway {
    url = 'jdbc:mariadb://' + env.get('DB_URL') + ':' + env.get('DB_PORT') + '/' + env.get('DB_DATABASE')
    user = env.get('DB_USER')
    password = env.get('DB_PASSWORD')
}
